@model E_CommerceAssignment.ViewModels.EditProductViewModel

@{
    ViewBag.Title = "EditProduct";
    var defPhoto = "/Public/No Image/no.image.600x300.png";
}


@using (Html.BeginForm("EditProduct", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="container" style="width: 50%">
        <div class="form-horizontal">
            <h4>EditProduct</h4>

            <div>
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
            </div>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="row">
                <div class="col-md-7">
                    <div class="row">
                        @if (Model.Photos.Count > 0)
                        {
                            foreach (var photo in Model.Photos)
                            {
                                <div class="img-thumbnail">
                                    <img src="@photo.Path/@photo.Title" alt="@photo.Title" width="300">

                                </div>
                            }

                        }
                        else
                        {
                            <div class="img-thumbnail">
                                <img src="@defPhoto" alt="" width="300" height="300" />
                            </div>
                        }
                    </div>
                    <br />
                    <div class="form-group">
                        <div class="btn btn-default">
                            @Html.TextBoxFor(m => m.Photo, new { type = "file", @multiple = "multiple", @class = "col-md-4 inputImg" })

                        </div>

                    </div>

                </div>
                <div class="col-md-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Models, htmlAttributes: new { @class = "control-label" })

                        @Html.DropDownListFor(model => model.ModelId, new SelectList(Model.Models, "Id", "Name"), "--Select Model--", new { @class = "form-control", @required = "required" })
                        @Html.ValidationMessageFor(model => model.Models, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Brands, htmlAttributes: new { @class = "control-label" })

                        @Html.DropDownListFor(model => model.BrandId, new SelectList(Model.Brands, "BrandId", "Brand"), "Select Brand", new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Brands, "", new { @class = "text-danger" })

                        @Html.LabelFor(model => model.Categories, htmlAttributes: new { @class = "control-label" })

                        @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.Categories, "CategoryId", "Category"), "Select Category", new { @class = "form-control", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Categories, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <br />
            <div class="form-group">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Storage, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Storage, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Storage, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Processor, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Processor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Processor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Memory, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Memory, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Memory, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Display, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Display, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Display, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-6">
                    @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-3">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>

    </div>


}

